import React from "react";

const HomeContent: React.FC = () => {
  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-bold">
        Estrutura Base Geral do Projeto Next.js
      </h1>

      <pre className="bg-gray-100 text-black p-4 rounded-md overflow-auto mb-6">
        {`
ğŸ“¦ my-nextjs-app
â”œâ”€â”€ ğŸ“‚ public
â”œâ”€â”€ ğŸ“‚ src
â”‚   â”œâ”€â”€ ğŸ“‚ app
â”‚   â”‚   â”œâ”€â”€ ğŸ“‚ dashboard
â”‚   â”‚   â”‚   â”œâ”€â”€ page.tsx  (PÃ¡gina do dashboard, ou igual para todas as rotas da aplicaÃ§Ã£o)
â”‚   â”‚   â”‚â”€â”€ layout.tsx  (Layout global, aplicÃ¡vel a todas as rotas)
â”‚   â”‚   â”‚â”€â”€ page.tsx  (PÃ¡gina inicial, ex: \`/\`)
â”‚   â”‚   â””â”€â”€ ğŸ“‚ (outros segmentos de rotas...)
â”‚   â”œâ”€â”€ ğŸ“‚ components
â”‚   â”‚   â”œâ”€â”€ ğŸ“‚ common
â”‚   â”‚   â”‚   â””â”€â”€ (Componentes globais e reutilizÃ¡veis, como Button, Modal, Input)
â”‚   â”‚   â”œâ”€â”€ ğŸ“‚ layout
â”‚   â”‚   â”‚   â””â”€â”€ (Componentes de layout, como Navbar, Footer, Sidebar)
â”‚   â”‚   â”œâ”€â”€ ğŸ“‚ modules
â”‚   â”‚   â”‚   â””â”€â”€ (Componentes especÃ­ficos de pÃ¡ginas)
â”‚   â”œâ”€â”€ ğŸ“‚ hooks
â”‚   â”‚   â””â”€â”€ (Custom hooks criados para facilitar a lÃ³gica e reutilizaÃ§Ã£o de cÃ³digo)
â”‚   â”œâ”€â”€ ğŸ“‚ services
â”‚   â”‚   â””â”€â”€ (ServiÃ§os de API, requisiÃ§Ãµes HTTP, como axios)
â”‚   â”œâ”€â”€ ğŸ“‚ styles
â”‚   â”‚   â””â”€â”€ (Arquivos de estilizaÃ§Ã£o global, como \`global.css\` ou arquivos de scss)
â”‚   â”œâ”€â”€ ğŸ“‚ types
â”‚   â”‚   â””â”€â”€ (Arquivos de tipos TypeScript usados globalmente no projeto)
â”‚   â”œâ”€â”€ ğŸ“‚ utils
â”‚   â”‚   â””â”€â”€ (FunÃ§Ãµes utilitÃ¡rias que sÃ£o usadas em vÃ¡rias partes do projeto)
â”‚   â”œâ”€â”€ ğŸ“‚ contexts
â”‚   â”‚   â””â”€â”€ (Contextos globais utilizando a API de Context do React)
â”‚   â”œâ”€â”€ ğŸ“‚ tests
â”‚   â”‚   â”œâ”€â”€ ğŸ“‚ unit
â”‚   â”‚   â”œâ”€â”€ ğŸ“‚ integration
â”‚   â”‚   â””â”€â”€ ğŸ“‚ e2e
â”‚   â””â”€â”€ ğŸ“‚ lib
â”‚       â””â”€â”€ (Bibliotecas ou pacotes customizados especÃ­ficos da aplicaÃ§Ã£o)
â””â”€â”€ next.config.js
â””â”€â”€ package.json
â””â”€â”€ tsconfig.json
â””â”€â”€ .env
        `}
      </pre>

      <h2 className="text-xl font-semibold">Detalhes das Pastas</h2>

      <section className="space-y-2">
        <h3 className="text-lg font-semibold">/public</h3>
        <p data-testid="public-folder-description">
          Armazena arquivos estÃ¡ticos acessÃ­veis publicamente, como imagens,
          vÃ­deos e favicons. Essa pasta Ã© usada para qualquer recurso que
          precise ser acessÃ­vel diretamente no navegador.
          <strong> Escolha:</strong> Colocar todos os arquivos estÃ¡ticos aqui
          facilita o acesso e permite uma gestÃ£o clara dos recursos pÃºblicos da
          aplicaÃ§Ã£o.
        </p>
      </section>

      <section className="space-y-2">
        <h3 className="text-lg font-semibold">/src/app</h3>
        <p data-testid="app-folder-description">
          A pasta principal para as rotas e pÃ¡ginas da aplicaÃ§Ã£o. No Next.js 13,
          esta pasta introduz uma maneira mais moderna e eficiente de organizar
          as rotas, utilizando layouts aninhados e segmentaÃ§Ã£o de rotas.
        </p>
        <ul className="list-disc list-inside ml-4 space-y-1">
          <li data-testid="app-layout-description">
            <strong>layout.tsx</strong>: Define o layout global da aplicaÃ§Ã£o,
            aplicÃ¡vel a todas as rotas. Este arquivo Ã© uma excelente maneira de
            garantir consistÃªncia na UI.
          </li>
          <li data-testid="app-page-description">
            <strong>page.tsx</strong>: PÃ¡gina inicial da aplicaÃ§Ã£o. Cada
            subpasta dentro de <code>app</code> representa uma rota, e o arquivo{" "}
            <code>page.tsx</code> define a entrada da rota.
          </li>
          <li data-testid="app-dashboard-description">
            <strong>dashboard/</strong>: Rotas e layouts especÃ­ficos para o
            dashboard, aproveitando a estrutura de rotas aninhadas.
          </li>
        </ul>
      </section>

      <section className="space-y-2">
        <h3 className="text-lg font-semibold">/src/components</h3>
        <p data-testid="components-folder-description">
          Organiza componentes reutilizÃ¡veis e modulares.
        </p>
        <ul className="list-disc list-inside ml-4 space-y-1">
          <li data-testid="components-common-description">
            <strong>common/</strong>: Componentes globais e reutilizÃ¡veis, como
            botÃµes e modais.
          </li>
          <li data-testid="components-layout-description">
            <strong>layout/</strong>: Componentes de layout, como cabeÃ§alho e
            rodapÃ©.
          </li>
          <li data-testid="components-modules-description">
            <strong>modules/</strong>: Componentes especÃ­ficos para certas
            pÃ¡ginas, encapsulando a lÃ³gica e a apresentaÃ§Ã£o necessÃ¡rias.
          </li>
        </ul>
      </section>

      <h2 className="text-xl font-semibold">BenefÃ­cios Desta Estrutura</h2>
      <ul className="list-disc list-inside ml-4 space-y-1">
        <li data-testid="benefits-scalability">
          <strong>Escalabilidade</strong>: Modulariza a aplicaÃ§Ã£o, facilitando a
          adiÃ§Ã£o de novas funcionalidades.
        </li>
        <li data-testid="benefits-organization">
          <strong>OrganizaÃ§Ã£o</strong>: Segrega diferentes tipos de arquivos e
          lÃ³gicas, tornando a aplicaÃ§Ã£o mais fÃ¡cil de manter.
        </li>
        <li data-testid="benefits-reusability">
          <strong>ReutilizaÃ§Ã£o</strong>: Centraliza componentes, hooks e
          serviÃ§os, promovendo a reutilizaÃ§Ã£o e evitando duplicaÃ§Ã£o.
        </li>
        <li data-testid="benefits-testability">
          <strong>Testabilidade</strong>: Estrutura clara para testes,
          promovendo uma cobertura abrangente da aplicaÃ§Ã£o.
        </li>
      </ul>
    </div>
  );
};

export default HomeContent;
